// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  phoneNumber String?
  department  String?
  password    String
  streams     Stream[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model CallRecord {
  id              String              @id @default(cuid())
  callSid         String              @unique
  phoneNumber     String
  fromNumber      String
  toNumber        String
  status          String
  direction       String              // "inbound" or "outbound"
  startTime       DateTime?
  endTime         DateTime?
  duration        Int?
  recordingUrl    String?
  isActive        Boolean             @default(true)
  transcriptions  CallTranscription[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("call_records")
}

model CallTranscription {
  id           String     @id @default(cuid())
  callRecordId String
  callRecord   CallRecord @relation(fields: [callRecordId], references: [id], onDelete: Cascade)
  speaker      String     // "caller" or "agent"
  text         String
  confidence   Float?
  timestamp    DateTime   @default(now())
  startTime    Float?     // Offset in seconds from call start
  endTime      Float?     // Offset in seconds from call start

  @@map("call_transcriptions")
}

model Stream {
  id          String   @id @default(cuid())
  title       String
  description String?
  isLive      Boolean  @default(false)
  streamKey   String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("streams")
}

model CallReport {
  id              String            @id @default(cuid())
  callSid         String            @unique
  fromNumber      String?           // Phone number that initiated the call
  toNumber        String?           // Phone number that received the call
  recordingUrl    String?           // URL to the call recording
  duration        Int?              // Call duration in seconds
  reportData      Json              // Stores the complete report structure
  totalTurns      Int?              // Total number of turns in conversation
  totalTips       Int?              // Total number of coaching tips generated
  usedTips        Int?              // Number of tips that were actually used
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  direction       String?           
  feedback        Json              
  isTrained       Boolean           @default(false)
  @@map("call_reports")
}

model Prompt {
  id          String      @id @default(cuid())
  key         String      @unique  // e.g., "salesCoach", "sentimentAnalyzer"
  name        String                // Human-readable name
  description String?               // Description of what this prompt does
  type        PromptType            // Type of prompt
  content     String      @db.Text  // The actual prompt content
  variables   Json?                 // JSON object for any variables or settings
  isActive    Boolean     @default(true)
  version     Int         @default(1)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?               // User who created/last modified
  
  @@map("prompts")
}

model PromptVersion {
  id        String   @id @default(cuid())
  promptId  String
  version   Int
  content   String   @db.Text
  variables Json?
  createdAt DateTime @default(now())
  createdBy String?
  
  @@unique([promptId, version])
  @@map("prompt_versions")
}

enum PromptType {
  SALES_COACHING
  SENTIMENT_ANALYZER
  STAGE_DETECTOR
  CALL_FEEDBACK
  COACHING_RULES
  PROMPT_HELPERS
}
